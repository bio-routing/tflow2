// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/bio-routing/tflow2/netflow/netflow.proto

package netflow

import (
	context "context"
	fmt "fmt"
	api "github.com/bio-routing/bio-rd/net/api"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Flow struct {
	// Shared flow attributes
	FlowShared *FlowShared `protobuf:"bytes,1,opt,name=FlowShared,proto3" json:"FlowShared,omitempty"`
	// Shared device attributes
	RtrShared *RtrShared `protobuf:"bytes,2,opt,name=RtrShared,proto3" json:"RtrShared,omitempty"`
	// Unix timestamp
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Number of packets
	Packets uint32 `protobuf:"varint,4,opt,name=packets,proto3" json:"packets,omitempty"`
	// Size of flow
	Size                 uint64   `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flow) Reset()         { *m = Flow{} }
func (m *Flow) String() string { return proto.CompactTextString(m) }
func (*Flow) ProtoMessage()    {}
func (*Flow) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd7dd19847a01b50, []int{0}
}

func (m *Flow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flow.Unmarshal(m, b)
}
func (m *Flow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flow.Marshal(b, m, deterministic)
}
func (m *Flow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow.Merge(m, src)
}
func (m *Flow) XXX_Size() int {
	return xxx_messageInfo_Flow.Size(m)
}
func (m *Flow) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow.DiscardUnknown(m)
}

var xxx_messageInfo_Flow proto.InternalMessageInfo

func (m *Flow) GetFlowShared() *FlowShared {
	if m != nil {
		return m.FlowShared
	}
	return nil
}

func (m *Flow) GetRtrShared() *RtrShared {
	if m != nil {
		return m.RtrShared
	}
	return nil
}

func (m *Flow) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Flow) GetPackets() uint32 {
	if m != nil {
		return m.Packets
	}
	return 0
}

func (m *Flow) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type RtrShared struct {
	// Router flow was received from
	Router *api.IP `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
	// Samplerate
	Samplerate uint64 `protobuf:"varint,2,opt,name=samplerate,proto3" json:"samplerate,omitempty"`
	// Next Hop
	NextHop *api.IP `protobuf:"bytes,3,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	// Next Hop ASN
	NextHopAs uint32 `protobuf:"varint,4,opt,name=next_hop_as,json=nextHopAs,proto3" json:"next_hop_as,omitempty"`
	// SNMP interface id flow was received on
	IntIn uint32 `protobuf:"varint,5,opt,name=int_in,json=intIn,proto3" json:"int_in,omitempty"`
	// SNMP interface if flow was transmitted on
	IntOut               uint32   `protobuf:"varint,6,opt,name=int_out,json=intOut,proto3" json:"int_out,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RtrShared) Reset()         { *m = RtrShared{} }
func (m *RtrShared) String() string { return proto.CompactTextString(m) }
func (*RtrShared) ProtoMessage()    {}
func (*RtrShared) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd7dd19847a01b50, []int{1}
}

func (m *RtrShared) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RtrShared.Unmarshal(m, b)
}
func (m *RtrShared) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RtrShared.Marshal(b, m, deterministic)
}
func (m *RtrShared) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RtrShared.Merge(m, src)
}
func (m *RtrShared) XXX_Size() int {
	return xxx_messageInfo_RtrShared.Size(m)
}
func (m *RtrShared) XXX_DiscardUnknown() {
	xxx_messageInfo_RtrShared.DiscardUnknown(m)
}

var xxx_messageInfo_RtrShared proto.InternalMessageInfo

func (m *RtrShared) GetRouter() *api.IP {
	if m != nil {
		return m.Router
	}
	return nil
}

func (m *RtrShared) GetSamplerate() uint64 {
	if m != nil {
		return m.Samplerate
	}
	return 0
}

func (m *RtrShared) GetNextHop() *api.IP {
	if m != nil {
		return m.NextHop
	}
	return nil
}

func (m *RtrShared) GetNextHopAs() uint32 {
	if m != nil {
		return m.NextHopAs
	}
	return 0
}

func (m *RtrShared) GetIntIn() uint32 {
	if m != nil {
		return m.IntIn
	}
	return 0
}

func (m *RtrShared) GetIntOut() uint32 {
	if m != nil {
		return m.IntOut
	}
	return 0
}

type FlowShared struct {
	// SRC IP
	SrcAddr *api.IP `protobuf:"bytes,1,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	// DST IP
	DstAddr *api.IP `protobuf:"bytes,2,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	// Protocol
	Protocol uint32 `protobuf:"varint,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// SRC Port
	SrcPort uint32 `protobuf:"varint,5,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	// DST Port
	DstPort uint32 `protobuf:"varint,6,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	// SRC AS
	SrcAs uint32 `protobuf:"varint,7,opt,name=src_as,json=srcAs,proto3" json:"src_as,omitempty"`
	// DST AS
	DstAs uint32 `protobuf:"varint,8,opt,name=dst_as,json=dstAs,proto3" json:"dst_as,omitempty"`
	// SRC PFX
	SrcPfx *api.Prefix `protobuf:"bytes,9,opt,name=src_pfx,json=srcPfx,proto3" json:"src_pfx,omitempty"`
	// DST PFX
	DstPfx               *api.Prefix `protobuf:"bytes,10,opt,name=dst_pfx,json=dstPfx,proto3" json:"dst_pfx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FlowShared) Reset()         { *m = FlowShared{} }
func (m *FlowShared) String() string { return proto.CompactTextString(m) }
func (*FlowShared) ProtoMessage()    {}
func (*FlowShared) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd7dd19847a01b50, []int{2}
}

func (m *FlowShared) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowShared.Unmarshal(m, b)
}
func (m *FlowShared) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowShared.Marshal(b, m, deterministic)
}
func (m *FlowShared) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowShared.Merge(m, src)
}
func (m *FlowShared) XXX_Size() int {
	return xxx_messageInfo_FlowShared.Size(m)
}
func (m *FlowShared) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowShared.DiscardUnknown(m)
}

var xxx_messageInfo_FlowShared proto.InternalMessageInfo

func (m *FlowShared) GetSrcAddr() *api.IP {
	if m != nil {
		return m.SrcAddr
	}
	return nil
}

func (m *FlowShared) GetDstAddr() *api.IP {
	if m != nil {
		return m.DstAddr
	}
	return nil
}

func (m *FlowShared) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *FlowShared) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *FlowShared) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *FlowShared) GetSrcAs() uint32 {
	if m != nil {
		return m.SrcAs
	}
	return 0
}

func (m *FlowShared) GetDstAs() uint32 {
	if m != nil {
		return m.DstAs
	}
	return 0
}

func (m *FlowShared) GetSrcPfx() *api.Prefix {
	if m != nil {
		return m.SrcPfx
	}
	return nil
}

func (m *FlowShared) GetDstPfx() *api.Prefix {
	if m != nil {
		return m.DstPfx
	}
	return nil
}

// Intf groups an interfaces ID and name
type Intf struct {
	// ID is an interface ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name is an interfaces name
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Intf) Reset()         { *m = Intf{} }
func (m *Intf) String() string { return proto.CompactTextString(m) }
func (*Intf) ProtoMessage()    {}
func (*Intf) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd7dd19847a01b50, []int{3}
}

func (m *Intf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Intf.Unmarshal(m, b)
}
func (m *Intf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Intf.Marshal(b, m, deterministic)
}
func (m *Intf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Intf.Merge(m, src)
}
func (m *Intf) XXX_Size() int {
	return xxx_messageInfo_Intf.Size(m)
}
func (m *Intf) XXX_DiscardUnknown() {
	xxx_messageInfo_Intf.DiscardUnknown(m)
}

var xxx_messageInfo_Intf proto.InternalMessageInfo

func (m *Intf) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Intf) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Flows defines a groups of flows
type Flows struct {
	// Group of flows
	Flows []*Flow `protobuf:"bytes,1,rep,name=flows,proto3" json:"flows,omitempty"`
	// Mapping of interface names to IDs
	InterfaceMapping     []*Intf  `protobuf:"bytes,2,rep,name=interface_mapping,json=interfaceMapping,proto3" json:"interface_mapping,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flows) Reset()         { *m = Flows{} }
func (m *Flows) String() string { return proto.CompactTextString(m) }
func (*Flows) ProtoMessage()    {}
func (*Flows) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd7dd19847a01b50, []int{4}
}

func (m *Flows) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flows.Unmarshal(m, b)
}
func (m *Flows) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flows.Marshal(b, m, deterministic)
}
func (m *Flows) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flows.Merge(m, src)
}
func (m *Flows) XXX_Size() int {
	return xxx_messageInfo_Flows.Size(m)
}
func (m *Flows) XXX_DiscardUnknown() {
	xxx_messageInfo_Flows.DiscardUnknown(m)
}

var xxx_messageInfo_Flows proto.InternalMessageInfo

func (m *Flows) GetFlows() []*Flow {
	if m != nil {
		return m.Flows
	}
	return nil
}

func (m *Flows) GetInterfaceMapping() []*Intf {
	if m != nil {
		return m.InterfaceMapping
	}
	return nil
}

func init() {
	proto.RegisterType((*Flow)(nil), "tflow2.netflow.Flow")
	proto.RegisterType((*RtrShared)(nil), "tflow2.netflow.RtrShared")
	proto.RegisterType((*FlowShared)(nil), "tflow2.netflow.FlowShared")
	proto.RegisterType((*Intf)(nil), "tflow2.netflow.Intf")
	proto.RegisterType((*Flows)(nil), "tflow2.netflow.Flows")
}

func init() {
	proto.RegisterFile("github.com/bio-routing/tflow2/netflow/netflow.proto", fileDescriptor_cd7dd19847a01b50)
}

var fileDescriptor_cd7dd19847a01b50 = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x49, 0x97, 0x36, 0xcd, 0xa9, 0x36, 0xc0, 0x62, 0xc2, 0xab, 0xd0, 0x54, 0x05, 0x01,
	0xd1, 0x24, 0x52, 0xa9, 0xbb, 0x00, 0x71, 0x57, 0x24, 0x10, 0xbb, 0x40, 0x54, 0xe6, 0x8e, 0x9b,
	0xca, 0x4d, 0x9c, 0xcd, 0xa2, 0xb1, 0x23, 0xdb, 0x65, 0x11, 0x4f, 0xc5, 0x5b, 0xc0, 0x63, 0x21,
	0xdb, 0xe9, 0x1f, 0xa6, 0x4c, 0xe2, 0xca, 0xf6, 0x39, 0xdf, 0xf9, 0xfc, 0x3b, 0xf1, 0x51, 0xe0,
	0xf2, 0x9a, 0x9b, 0x9b, 0xcd, 0x2a, 0xcb, 0x65, 0x35, 0x5d, 0x71, 0xf9, 0x5a, 0xc9, 0x8d, 0xe1,
	0xe2, 0x7a, 0x6a, 0xca, 0xb5, 0xbc, 0x9d, 0x4d, 0x05, 0x73, 0x9b, 0xed, 0x9a, 0xd5, 0x4a, 0x1a,
	0x89, 0x4e, 0x7c, 0x36, 0x6b, 0xa3, 0xe3, 0xe9, 0x3d, 0x26, 0x6e, 0x5f, 0xd8, 0xe2, 0x29, 0xad,
	0xb9, 0x5d, 0xbd, 0x41, 0xf2, 0x3b, 0x80, 0xf0, 0xe3, 0x5a, 0xde, 0xa2, 0x77, 0x00, 0x76, 0xfd,
	0x7a, 0x43, 0x15, 0x2b, 0x70, 0x30, 0x09, 0xd2, 0xd1, 0x6c, 0x9c, 0xfd, 0x6b, 0x9f, 0xed, 0x15,
	0xe4, 0x40, 0x8d, 0xde, 0x40, 0x4c, 0x8c, 0x6a, 0x4b, 0x7b, 0xae, 0xf4, 0xec, 0x6e, 0xe9, 0x4e,
	0x40, 0xf6, 0x5a, 0xf4, 0x0c, 0x62, 0xc3, 0x2b, 0xa6, 0x0d, 0xad, 0x6a, 0x7c, 0x34, 0x09, 0xd2,
	0x23, 0xb2, 0x0f, 0x20, 0x0c, 0x51, 0x4d, 0xf3, 0xef, 0xcc, 0x68, 0x1c, 0x4e, 0x82, 0xf4, 0x98,
	0x6c, 0x8f, 0x08, 0x41, 0xa8, 0xf9, 0x4f, 0x86, 0xfb, 0x93, 0x20, 0x0d, 0x89, 0xdb, 0x27, 0x7f,
	0x82, 0x03, 0x0a, 0xf4, 0x1c, 0x06, 0xb6, 0x77, 0xa6, 0xda, 0x56, 0x46, 0xd9, 0x8a, 0x4b, 0x0b,
	0x93, 0x5d, 0x2d, 0x48, 0x9b, 0x42, 0xe7, 0x00, 0x9a, 0x56, 0xf5, 0x9a, 0x29, 0x6a, 0x98, 0x03,
	0x0f, 0xc9, 0x41, 0x04, 0xbd, 0x84, 0xa1, 0x60, 0x8d, 0x59, 0xde, 0x48, 0x4f, 0x77, 0xc7, 0x26,
	0xb2, 0xc9, 0x4f, 0xb2, 0x46, 0xe7, 0x30, 0xda, 0xea, 0x96, 0x74, 0x0b, 0x1b, 0xb7, 0xd9, 0xb9,
	0x46, 0xa7, 0x30, 0xe0, 0xc2, 0x2c, 0xb9, 0x70, 0xc0, 0xc7, 0xa4, 0xcf, 0x85, 0xb9, 0x12, 0xe8,
	0x29, 0x44, 0x36, 0x2c, 0x37, 0x06, 0x0f, 0x5c, 0xdc, 0xaa, 0xbe, 0x6c, 0x4c, 0xf2, 0xab, 0x77,
	0xf8, 0x18, 0x16, 0x43, 0xab, 0x7c, 0x49, 0x8b, 0xa2, 0xb3, 0x9b, 0x48, 0xab, 0x7c, 0x5e, 0x14,
	0xca, 0xea, 0x0a, 0x6d, 0xbc, 0xae, 0xd7, 0xa1, 0x2b, 0xb4, 0x71, 0xba, 0x31, 0x0c, 0xdd, 0xe3,
	0xe7, 0x72, 0xdd, 0xb2, 0xee, 0xce, 0xe8, 0xcc, 0xdf, 0x55, 0x4b, 0x65, 0x5a, 0x58, 0x6b, 0xbf,
	0x90, 0xca, 0xd8, 0x94, 0xb5, 0x77, 0x29, 0xcf, 0x6b, 0x1d, 0x5d, 0xea, 0x14, 0x06, 0x8e, 0x50,
	0xe3, 0xc8, 0x37, 0x68, 0x91, 0x5c, 0xdf, 0x0e, 0x48, 0xe3, 0xa1, 0x0f, 0x5b, 0x02, 0x8d, 0x52,
	0x88, 0xdc, 0x1d, 0x65, 0x83, 0x63, 0x87, 0xf9, 0x70, 0x87, 0xb9, 0x50, 0xac, 0xe4, 0x0d, 0xb1,
	0x6e, 0x8b, 0xb2, 0xb1, 0x4a, 0x77, 0x65, 0xd9, 0x60, 0xb8, 0x47, 0x69, 0x11, 0xca, 0x26, 0xb9,
	0x80, 0xf0, 0x4a, 0x98, 0x12, 0x9d, 0x40, 0x8f, 0xfb, 0xf1, 0x3d, 0x26, 0x3d, 0x5e, 0xd8, 0x49,
	0x11, 0xb4, 0xf2, 0x8f, 0x1b, 0x13, 0xb7, 0x4f, 0x7e, 0x40, 0xdf, 0x7e, 0x5d, 0x8d, 0x2e, 0xa0,
	0x6f, 0x67, 0x53, 0xe3, 0x60, 0x72, 0x94, 0x8e, 0x66, 0x4f, 0xba, 0xc6, 0x9d, 0x78, 0x09, 0x9a,
	0xc3, 0x63, 0x2e, 0x0c, 0x53, 0x25, 0xcd, 0xd9, 0xb2, 0xa2, 0x75, 0xcd, 0xc5, 0x35, 0xee, 0x75,
	0xd7, 0x59, 0x12, 0xf2, 0x68, 0x27, 0xff, 0xec, 0xd5, 0xb3, 0x0f, 0x10, 0x53, 0x21, 0xa4, 0xa1,
	0x46, 0x2a, 0xf4, 0x16, 0x86, 0x73, 0x7f, 0x60, 0xa8, 0xf3, 0xe2, 0x71, 0x67, 0x34, 0x79, 0xf0,
	0xfe, 0xd5, 0xb7, 0x17, 0xff, 0xf5, 0xab, 0x58, 0x0d, 0xdc, 0xab, 0x5e, 0xfe, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x54, 0xf7, 0x11, 0x4c, 0x5a, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnnotatorClient is the client API for Annotator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnnotatorClient interface {
	Annotate(ctx context.Context, in *Flow, opts ...grpc.CallOption) (*Flow, error)
}

type annotatorClient struct {
	cc *grpc.ClientConn
}

func NewAnnotatorClient(cc *grpc.ClientConn) AnnotatorClient {
	return &annotatorClient{cc}
}

func (c *annotatorClient) Annotate(ctx context.Context, in *Flow, opts ...grpc.CallOption) (*Flow, error) {
	out := new(Flow)
	err := c.cc.Invoke(ctx, "/tflow2.netflow.annotator/Annotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnotatorServer is the server API for Annotator service.
type AnnotatorServer interface {
	Annotate(context.Context, *Flow) (*Flow, error)
}

func RegisterAnnotatorServer(s *grpc.Server, srv AnnotatorServer) {
	s.RegisterService(&_Annotator_serviceDesc, srv)
}

func _Annotator_Annotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotatorServer).Annotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tflow2.netflow.annotator/Annotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotatorServer).Annotate(ctx, req.(*Flow))
	}
	return interceptor(ctx, in, info, handler)
}

var _Annotator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tflow2.netflow.annotator",
	HandlerType: (*AnnotatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Annotate",
			Handler:    _Annotator_Annotate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/bio-routing/tflow2/netflow/netflow.proto",
}
